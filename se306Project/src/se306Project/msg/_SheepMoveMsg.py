"""autogenerated by genpy from se306Project/SheepMoveMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SheepMoveMsg(genpy.Message):
  _md5sum = "d287be81e5cad129923f1e606a05a9af"
  _type = "se306Project/SheepMoveMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string moveCommand
int64 velX
int64 velY
string age

"""
  __slots__ = ['moveCommand','velX','velY','age']
  _slot_types = ['string','int64','int64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       moveCommand,velX,velY,age

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SheepMoveMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.moveCommand is None:
        self.moveCommand = ''
      if self.velX is None:
        self.velX = 0
      if self.velY is None:
        self.velY = 0
      if self.age is None:
        self.age = ''
    else:
      self.moveCommand = ''
      self.velX = 0
      self.velY = 0
      self.age = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.moveCommand
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2q.pack(_x.velX, _x.velY))
      _x = self.age
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.moveCommand = str[start:end].decode('utf-8')
      else:
        self.moveCommand = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.velX, _x.velY,) = _struct_2q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.age = str[start:end].decode('utf-8')
      else:
        self.age = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.moveCommand
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2q.pack(_x.velX, _x.velY))
      _x = self.age
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.moveCommand = str[start:end].decode('utf-8')
      else:
        self.moveCommand = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.velX, _x.velY,) = _struct_2q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.age = str[start:end].decode('utf-8')
      else:
        self.age = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2q = struct.Struct("<2q")
