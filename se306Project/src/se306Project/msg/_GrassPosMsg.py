"""autogenerated by genpy from se306Project/GrassPosMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GrassPosMsg(genpy.Message):
  _md5sum = "0eae6c672f4c571ef2af913c8b120b5f"
  _type = "se306Project/GrassPosMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 grassNum
float32 x
float32 y
int32 growth

"""
  __slots__ = ['grassNum','x','y','growth']
  _slot_types = ['int32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       grassNum,x,y,growth

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GrassPosMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.grassNum is None:
        self.grassNum = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.growth is None:
        self.growth = 0
    else:
      self.grassNum = 0
      self.x = 0.
      self.y = 0.
      self.growth = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_i2fi.pack(_x.grassNum, _x.x, _x.y, _x.growth))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.grassNum, _x.x, _x.y, _x.growth,) = _struct_i2fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_i2fi.pack(_x.grassNum, _x.x, _x.y, _x.growth))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.grassNum, _x.x, _x.y, _x.growth,) = _struct_i2fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i2fi = struct.Struct("<i2fi")
